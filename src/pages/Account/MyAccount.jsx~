import React, { useContext, useState } from 'react'

import { ThemeContext } from '../../context/ThemeContext'
import { Button } from 'antd'
import {
  DeleteOutlined,
  EditOutlined,
  ExportOutlined,
  RightOutlined,
} from '@ant-design/icons'
import AccessoriesCard from '../../components/Cards/AccessoriesCard'
import CustomModelOne from '../../components/CustomModel/CustomModel'
import CustomModelViewProduct from '../../components/CustomModel/CustomModelViewProduct'
import CustomModelEditPassword from '../../components/CustomModel/CustomModelEditPassword'
import CustomModelEditName from '../../components/CustomModel/CustomModelEditName'
import CustomModelAddressBlock from '../../components/CustomModel/CustomModelAddressBlock'
import CustomModelNewPayment from '../../components/CustomModel/CustomModelNewPayment'
import { useGetOrderByUserQuery } from '../../features/api/orderSlice.js'
import { useSelector } from 'react-redux'
import { retry } from '@reduxjs/toolkit/query'
import { useGetAddressQuery } from '../../features/api/addressSlice.js'

const MyAccount = ({ setCurrentSlide }) => {
  const { theme } = useContext(ThemeContext)
  const user = useSelector((state) => state.auth.userId)
  const {
    data: myOrders,
    error: myOrdersError,
    isLoading: myOrdersLoading,
  } = useGetOrderByUserQuery(user)
  const { data: addressData, isLoading: loadingAddress } =
    useGetAddressQuery(user)

  const [activeAddress, setActiveAddress] = useState({})
  const [addressModelOpenType, setAddressModelOpenType] = useState('new')
  const [activePayment, setActivePayment] = useState({})
  const [paymentModelOpenType, setPaymentModelOpenType] = useState('new')

  // console.log(JSON.stringify(myOrders?.data?.docs))
  const myOrderHistoryProduct = myOrders?.data?.docs.flatMap((order) =>
    order.products.map((productItem) => productItem.product),
  )

  const colours = [
    {
      color1: '#FFFFFF',
      color2: '#FFFD86',
      colorDoct: '#A67102',
    },
    {
      color1: '#ffffff',
      color2: '#FEFFC1',
      colorDoct: '#A67102',
    },
    {
      color1: '#f3f4f6',
      color2: '#e5e7eb',
      colorDoct: '#d1d5db',
    },
    {
      color1: '#FEFFC1',
      color2: '#442604',
      colorDoct: '#A67102',
    },
    {
      color1: '#FEFFC1',
      color2: '#89580A',
      colorDoct: '#442604',
    },
  ]

  const addresses = [
    {
      fullName: 'John Doe',
      streetAddress: '123 Main Street',
      additionalAddress: 'Apartment 4B',
      city: 'New York',
      state: 'NY',
      zipCode: '10001',
      isDefault: true,
      _id: '1a2b3c4d5e6f7g8h9i0j',
      createdAt: '2024-11-30T07:35:16.830Z',
      updatedAt: '2024-11-30T07:35:16.830Z',
    },
    {
      fullName: 'Jane Smith',
      streetAddress: '456 Elm Street',
      additionalAddress: 'Suite 500',
      city: 'Los Angeles',
      state: 'CA',
      zipCode: '90001',
      isDefault: false,
      _id: '2b3c4d5e6f7g8h9i0j1k',
      createdAt: '2024-11-30T07:35:16.830Z',
      updatedAt: '2024-11-30T07:35:16.830Z',
    },
    {
      fullName: 'Michael Johnson',
      streetAddress: '789 Market Street',
      additionalAddress: 'Unit 2A',
      city: 'Chicago',
      state: 'IL',
      zipCode: '60601',
      isDefault: false,
      _id: '3c4d5e6f7g8h9i0j1k2l',
      createdAt: '2024-11-30T07:35:16.830Z',
      updatedAt: '2024-11-30T07:35:16.830Z',
    },
    {
      fullName: 'Emily Davis',
      streetAddress: '101 Broadway',
      additionalAddress: '',
      city: 'Houston',
      state: 'TX',
      zipCode: '77001',
      isDefault: false,
      _id: '4d5e6f7g8h9i0j1k2l3m',
      createdAt: '2024-11-30T07:35:16.830Z',
      updatedAt: '2024-11-30T07:35:16.830Z',
    },
    {
      fullName: 'William Brown',
      streetAddress: '202 Sunset Boulevard',
      additionalAddress: 'Penthouse',
      city: 'Miami',
      state: 'FL',
      zipCode: '33101',
      isDefault: false,
      _id: '5e6f7g8h9i0j1k2l3m4n',
      createdAt: '2024-11-30T07:35:16.830Z',
      updatedAt: '2024-11-30T07:35:16.830Z',
    },
  ]

  const cards2 = [
    {
      cartNumber: '1234456778901234',
      cartName: 'Jenn Jiang',
      expDate: '12/30',
      color1: '#FEFFC1',
      color2: '#442604',
      colorDoct: '#A67102',
    },
    {
      cartNumber: '1234456778901234',
      cartName: 'Jenn Jiang',
      expDate: '12/30',
      color1: '#FEFFC1',
      color2: '#89580A',
      colorDoct: '#442604',
    },
  ]

  const payments = [
    {
      cardHolderName: 'John Doe',
      cardNumber: '4111111111111111',
      expiryDate: '12/26',
      cardType: 'Visa',
      cvv: 234,
      isDefault: false,
      _id: '6743c9105150f66a58937e4e',
      createdAt: '2024-11-25T00:47:12.430Z',
    },
    {
      cardHolderName: 'John Doe',
      cardNumber: '5111111111311112',
      expiryDate: '12/27',
      cardType: 'MasterCard',
      cvv: 235,
      isDefault: true,
      _id: '6743cc6665975af2f7d95d6b',
      createdAt: '2024-11-25T01:01:26.039Z',
    },
    {
      cardHolderName: 'John Doe',
      cardNumber: '5111111131311112',
      expiryDate: '12/27',
      cardType: 'MasterCard',
      cvv: 235,
      isDefault: false,
      _id: '6743cd19e6099de566892e05',
      createdAt: '2024-11-25T01:04:25.389Z',
    },
    {
      cardHolderName: 'John Doe',
      cardNumber: '5111411131311112',
      expiryDate: '12/27',
      cardType: 'MasterCard',
      cvv: 235,
      isDefault: false,
      _id: '6743d0f12a82f71ced804a5a',
      createdAt: '2024-11-25T01:20:49.746Z',
    },
    {
      cardHolderName: 'John Doe',
      cardNumber: '5111416131311112',
      expiryDate: '12/27',
      cardType: 'MasterCard',
      cvv: 235,
      isDefault: false,
      _id: '6744123f612033a359e7f7de',
      createdAt: '2024-11-25T05:59:27.550Z',
    },
  ]

  // dialog section

  const [showCustomModelOne, setShowCustomModelOne] = useState(false)
  const openCustomModelOne = (id) => {
    setShowCustomModelOne(true)
  }

  const [showCustomModelViewProduct, setShowCustomModelViewProduct] =
    useState(false)
  const openCustomModelViewProduct = (id) => {
    setShowCustomModelViewProduct(true)
  }

  const [showCustomModelEditName, setShowCustomModelEditName] = useState(false)
  const openCustomModelEditName = (id = null) => {
    setShowCustomModelEditName(true)
  }

  const [showCustomModelEditPassword, setShowCustomModelEditPassword] =
    useState(false)
  const openCustomModelEditPassword = (id = null) => {
    setShowCustomModelEditPassword(true)
  }

  const [showCustomModelAddressBlock, setShowCustomModelAddressBlock] =
    useState(false)
  const openCustomModelAddressBlock = (type = 'new', address = null) => {
    setAddressModelOpenType(type)
    address && setActiveAddress(address)
    setShowCustomModelAddressBlock(true)
  }

  const [showCustomModelNewPayment, setShowCustomModelNewPayment] =
    useState(false)
  const openCustomModelNewPayment = (type = 'new', payment = null) => {
    setPaymentModelOpenType(type)
    payment && setActivePayment(payment)
    setShowCustomModelNewPayment(true)
  }

  const handlePageChange = (page) => {
    setCurrentPage(page)
    console.log(`Current page: ${page}`) // Log the current page when changed
  }

  return (
    <>
      {/* Personal Details section  */}
      <h3 className="text-3xl">Personal Details</h3>
      <p className="text-base opacity-60">
        Manage your name and contact info. These personal details are private
        and will not be displayed to other users
      </p>

      <div className="flex flex-col gap-5 mt-20">
        <div
          className="flex w-full justify-around"
          onClick={openCustomModelEditName}
        >
          <span className="w-1/4">Name</span>
          <span className="w-1/4 text-xs">Poorna Kawishla</span>
          <span className="w-2/4 text-end text-3xl font-black">
            <RightOutlined />
          </span>
        </div>
        <hr />
        <div
          className="flex w-full justify-around"
          onClick={openCustomModelEditPassword}
        >
          <span className="w-1/4">Password</span>
          <span className="w-1/4 text-xs">Last changed Aug 5</span>
          <span className="w-2/4 text-end text-3xl font-black">
            <RightOutlined />
          </span>
        </div>
      </div>

      {/* Address Book section */}
      <div className="mt-28">
        <div className="relative flex items-center justify-between">
          <div
            className="text-lg sm:text-3xl w-fit z-10"
            style={{ backgroundColor: theme.background }}
          >
            Address Book
          </div>
          <div
            className="absolute bg-transparent h-0.5 rounded w-full z-0"
            style={{ backgroundColor: theme.textColor }}
          ></div>
          <div>
            <Button
              className="font-semibold w-fit md:w-40"
              shape="round"
              icon={<EditOutlined />}
              size="large"
              onClick={() => openCustomModelAddressBlock()}
            >
              <div className="hidden sm:inline">New</div>
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-2 gap-5 mt-10 justify-center justify-items-center">
          {addressData.map((address, index) => {
            const randomNumber = Math.floor(Math.random() * 5)
            return (
              <div
                key={address._id}
                className="relative w-full max-w-[482px] rounded-2xl shadow-sm p-4 md:p-6 overflow-hidden min-h-[245px]"
              >
                {/* Background layers */}
                <div
                  className="absolute inset-0"
                  style={{ backgroundColor: colours[randomNumber].color1 }} // Example color, replace with dynamic if needed
                />

                <div
                  className="absolute inset-0"
                  style={{
                    backgroundColor: colours[randomNumber].color2,
                    clipPath: 'circle(60% at 100% 25%)',
                  }}
                />

                <div
                  className="absolute top-4 right-4 w-5 h-5 rounded-full"
                  style={{ backgroundColor: colours[randomNumber].colorDoct }} // Example color, replace dynamically if needed
                />

                {/* Content */}
                <div className="relative z-10 p-5">
                  <h2 className="text-sm sm:text-lg font-bold text-black mb-4">
                    {address.fullName}
                  </h2>

                  <div className="space-y-1.5 text-gray-600 text-sm  sm:text-lg font-bold flex flex-col gap-4">
                    <p>{address.streetAddress}</p>
                    {address.additionalAddress && (
                      <p>{address.additionalAddress}</p>
                    )}
                    <p>
                      {address.city}, {address.state} {address.zipCode}
                    </p>
                  </div>

                  <div className="absolute -bottom-3 right-0 flex gap-4 pe-5">
                    <button
                      className="p-2.5 bg-white rounded-full shadow-sm hover:bg-gray-50 transition-colors"
                      aria-label="Edit"
                      onClick={() =>
                        openCustomModelAddressBlock('update', address)
                      }
                    >
                      <EditOutlined />
                    </button>
                    <button
                      className="p-2.5 bg-white rounded-full shadow-sm hover:bg-gray-50 transition-colors"
                      aria-label="Delete"
                    >
                      <DeleteOutlined />
                    </button>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      </div>

      {/* Payment Method section */}
      <div className="my-28">
        <div className="relative flex items-center justify-between">
          <div
            className="text-lg sm:text-3xl w-fit z-10"
            style={{ backgroundColor: theme.background }}
          >
            Payment Method
          </div>
          <div
            className="absolute bg-transparent h-0.5 rounded w-full z-0"
            style={{ backgroundColor: theme.textColor }}
          ></div>
          <div>
            <Button
              className="font-semibold w-fit md:w-40"
              shape="round"
              icon={<EditOutlined />}
              size="large"
              onClick={() => openCustomModelNewPayment()}
            >
              <div className="hidden sm:inline">New</div>
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-2 gap-5 mt-10 justify-center justify-items-center">
          {payments.map((payment) => {
            const randomNumber = Math.floor(Math.random() * 5)
            return (
              <div
                key={payment._id}
                className="relative w-full max-w-[482px] rounded-2xl shadow-sm p-4 md:p-6 overflow-hidden min-h-[245px]"
              >
                <div
                  className="absolute inset-0"
                  style={{ backgroundColor: colours[randomNumber].color1 }}
                />

                <div
                  className="absolute inset-0"
                  style={{
                    backgroundColor: colours[randomNumber].color2,
                    clipPath: 'circle(60% at 100% 25%)',
                  }}
                />

                <div
                  className="absolute top-4 right-10 w-5 h-5 rounded-full"
                  style={{ backgroundColor: colours[randomNumber].colorDoct }}
                />

                {/* Content */}
                {/* Card content */}
                <div className="relative  p-6 h-full flex flex-col justify-between">
                  <div className="text-gray-600 flex flex-col justify-around h-full">
                    <div className="flex justify-between">
                      <div>
                        <div className="text-xs mb-1 font-semibold">
                          Card Number
                        </div>
                        <div className="font-mono text-gray-800 tracking-wider mb-6">
                          {payment.cardNumber}
                        </div>
                      </div>
                      <div>
                        <div className="text-xs mb-1 font-semibold">Name</div>
                        <div className="font-mono text-gray-800 tracking-wider mb-6">
                          {payment.cardHolderName}
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-between pe-10">
                      <div>
                        <div className="font-semibold text-xs mb-1">
                          Card Type
                        </div>
                        <div className="text-sm">{payment.cardType}</div>
                      </div>

                      <div>
                        <div className="text-[#E7E7E7] text-xs mb-1">
                          Exp.Date
                        </div>
                        <div className="text-sm text-[#888888]">
                          {payment.expiryDate}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="absolute -bottom-3 right-0 flex gap-4 pe-5 text-white">
                    <button
                      className="p-2.5 bg-white rounded-full shadow-sm hover:bg-gray-50 transition-colors text-black"
                      aria-label="Edit"
                      onClick={() =>
                        openCustomModelNewPayment('update', payment)
                      }
                    >
                      <EditOutlined />
                    </button>
                    <button
                      className="p-2.5 bg-white rounded-full shadow-sm hover:bg-gray-50 transition-colors text-black"
                      aria-label="Delete"
                    >
                      <DeleteOutlined />
                    </button>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      </div>

      {/* Oder History section  */}
      <>
        <div className="relative flex items-center justify-between">
          <div
            className="text-lg sm:text-3xl w-fit z-10"
            style={{ backgroundColor: theme.background }}
          >
            Oder History
          </div>
          <div
            className="absolute bg-transparent h-0.5 rounded w-full z-0"
            style={{ backgroundColor: theme.textColor }}
          ></div>
          <div>
            <Button
              onClick={() => setCurrentSlide('OrderHistory')}
              className="font-semibold w-fit md:w-40"
              shape="round"
              icon={<ExportOutlined />}
              size="large"
            >
              <div className="hidden sm:inline">View All</div>
            </Button>
          </div>
        </div>

        {myOrders?.data?.docs?.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 pb-10 justify-items-center">
            {myOrderHistoryProduct.map((product, index) => (
              <AccessoriesCard
                product={product}
                id={product._id}
                key={index}
                image={product.image} //
                name={product.name}
                country={product.country}
                originalPrice={
                  product.unitDiscount != 0 && product.unitDiscount
                    ? product.unitPrice
                    : null
                }
                salePrice={
                  product.unitDiscount != 0 && product.unitDiscount
                    ? product.unitPrice -
                      (product.unitPrice / 100) * product.unitDiscount
                    : product.unitPrice
                }
                OpenModel={openCustomModelOne}
                OpenModelViewProduct={openCustomModelViewProduct}
              />
            ))}
          </div>
        ) : (
          <div className="text-5xl h-screen w-full flex justify-center items-center font-black opacity-60 text-center">
            Product Not Found!
          </div>
        )}
      </>

      {/* embed model  */}
      <CustomModelOne
        showCustomModelOne={showCustomModelOne}
        setShowCustomModelOne={setShowCustomModelOne}
      />
      <CustomModelViewProduct
        showCustomModelViewProduct={showCustomModelViewProduct}
        setShowCustomModelViewProduct={setShowCustomModelViewProduct}
      />
      <CustomModelEditName
        showCustomModel={showCustomModelEditName}
        setShowCustomModel={setShowCustomModelEditName}
        width="778px"
      />
      <CustomModelEditPassword
        showCustomModel={showCustomModelEditPassword}
        setShowCustomModel={setShowCustomModelEditPassword}
        width="778px"
      />
      <CustomModelAddressBlock
        showCustomModel={showCustomModelAddressBlock}
        setShowCustomModel={setShowCustomModelAddressBlock}
        width="778px"
        address={addressModelOpenType == 'update' ? activeAddress : null}
        type={addressModelOpenType} // new or update
      />
      <CustomModelNewPayment
        showCustomModel={showCustomModelNewPayment}
        setShowCustomModel={setShowCustomModelNewPayment}
        width="778px"
        payment={paymentModelOpenType == 'update' ? activePayment : null}
        type={paymentModelOpenType} // new or update
      />
    </>
  )
}

export default MyAccount
